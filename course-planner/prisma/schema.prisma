// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id                String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  code              String            @unique
  name              String
  description       String?
  credits           Int
  department        String
  level             String
  prerequisites     String[]          @default([])
  term              String[]
  gradeDistribution Json?
  courseSchedules   CourseSchedule[]
  metadata          CourseMetadata?
  // 선수과목 관계
  semesterCourses   SemesterCourse[]
  prerequisiteFor   CoursePrerequisite[] @relation("Prerequisites")
  requiredFor       CoursePrerequisite[] @relation("RequiredFor")
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  dayOfWeek String
  startTime String
  endTime   String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model CourseMetadata {
  id        String   @id @default(uuid())
  courseId  String   @unique
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model AcademicYear {
  id          String        @id @default(uuid())
  yearName    String
  startYear   Int
  semesters   Semester[]
  planId      String
  plan        AcademicPlan @relation(fields: [planId], references: [id])
}

model Semester {
  id              String          @id @default(uuid())
  term            String
  year            Int
  academicYearId String
  academicYear    AcademicYear    @relation(fields: [academicYearId], references: [id])
  courses         SemesterCourse[]
}

model SemesterCourse {
  id          String  @id @default(uuid())
  courseId   String
  semesterId String
  course     Course  @relation(fields: [courseId], references: [id])
  semester   Semester @relation(fields: [semesterId], references: [id])
}

model AcademicPlan {
  id          String        @id @default(uuid())
  userId      String        @unique
  years       AcademicYear[]
  savedCourses Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CoursePrerequisite {
  id             String  @id @default(uuid())
  courseId       String  // The course that has prerequisites
  course         Course  @relation("Prerequisites", fields: [courseId], references: [id])
  prerequisiteId String  // The course that is required
  prerequisite   Course  @relation("RequiredFor", fields: [prerequisiteId], references: [id])
  type           String  @default("required") // required, concurrent, recommended
  grade          String? // Minimum grade requirement (optional)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([courseId, prerequisiteId])
}